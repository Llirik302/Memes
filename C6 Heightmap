
#include "pch.h"
#include "stdio.h"
#include "stdlib.h"
#include "time.h"

/*Коэффициенты входной матрицы считать высотами некоторого участка
поверхности. Получить на выходе матрицу, в которой отмечены локальные
минимумы карты.*/


double** alloc_matrix(int rows, int columns)
{
	double** matrix = (double**)calloc(rows, sizeof(double*));
	for (int i = 0; i < rows; i++)
	{
		matrix[i] = (double*)calloc(columns, sizeof(double));
	}
	return matrix;
}


void free_matrix(double** matrix, int rows)
{
	for (int i = 0; i < rows; i++)
	{
		free(matrix[i]);
	}
	free(matrix);
}

void fill_matrix(double** matrix, int rows, int columns)
{
	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < columns; ++j)
		{
			matrix[i][j] = rand() % 19 + 1;
		}
	}
}

double** find_localmin(double** matrix, int rows, int columns)
{
	double** new_matrix = alloc_matrix(rows, columns);

	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < columns; ++j)
		{
			int b = 0;
			if (i != 0)
				if (matrix[i][j] >= matrix[i - 1][j])
					b++;
			if (i + 1 != rows)
				if (matrix[i][j] >= matrix[i + 1][j])
					b++;
			if (j != 0)
				if (matrix[i][j] >= matrix[i][j - 1])
					b++;
			if (j + 1 != columns)
				if (matrix[i][j] >= matrix[i][j + 1])
					b++;
			if (!b)
				new_matrix[i][j] = matrix[i][j];
			else
				new_matrix[i][j] = 0.0;
		}
	}
	return new_matrix;
}

void print_matrix(double** matrix, int rows, int columns)
{
	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < columns; ++j)
		{
			printf("%.2lf ", matrix[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}

int main()
{
	srand(time(NULL));
	int n, m;
	scanf_s("%d%d", &n, &m);
	double** A = alloc_matrix(n, m);
	fill_matrix(A, n, m);
	print_matrix(A, n, m);
	double** B = find_localmin(A, n, m);
	print_matrix(B, n, m);
	free_matrix(B, n);
	free_matrix(A, n);
	return 0;
}

